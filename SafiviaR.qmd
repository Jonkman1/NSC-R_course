---
title: "Using Copilot in RStudio"
format: html
---



## Introduction
Recently RStudio/Posit launched a new product called Copilot. Copilot is a tool that helps you write code faster and with less effort. It does this by suggesting code as you type. Copilot is powered by OpenAI Codex, a new AI system created by OpenAI. OpenAI Codex is trained on publicly available source code and natural language. It is able to generate code in a range of languages, including Python, JavaScript, TypeScript, Ruby, Go, PHP, Java, C++, C, Objective-C, and Swift. Copilot is currently available as a technical preview in Visual Studio Code and GitHub Copilot.
in this tutorial, we will show you how to use Copilot in RStudio. In this tutorial we use the RStudio Desktop version.

Prerequisites
To follow this tutorial, you need to have RStudio Desktop installed on your computer. You can download RStudio Desktop from the RStudio website. You also need to have a GitHub account. If you donâ€™t have a GitHub account, you have to create one. 

Set up Copilot in RStudio   

To enable Copilot in RStudio, you have to install the RStudio Copilot plugin. To install the RStudio Copilot plugin, you have to follow these steps:
1. Navigate to Tools > Global Options > Copilot.
2. Check the box next to Enable Copilot.
3. Download and install the Copilot plugin.
4. Click the "Sign in with GitHub" button and follow the instructions to sign in to your GitHub account.
5. In the "Github Copilot Sign in" dialog, copy the Verification Code.

![](Screenshot1.png)

6. Paste the Verification Code into the "Github Copilot Sign in" dialog and click the "Sign in" button.
7. Github will request the necessary permissions to install the Copilot plugin. Click the "Authorize" button to grant the necessary permissions.
8. After the permissions have been approved, your RStudio IDE will indicate that Copilot is enabled.    
9. Close the Global Options dialogue, open a source file, and start typing. Copilot will start suggesting code as you type.

[Here](https://docs.posit.co/ide/user/ide/guide/tools/copilot.html) you can find this information.

## Using Copilot

This month I'm involved in a [NSC-R Data Carpentry Workshop](https://asiermoneva.com/2023-10-12-nscr/). This is a three day wokshop. The first day is about *OpenRefine for Social Science*. The other day are titled *R for Social Scientist*. 
OpenRefine is a powerful tool for working with messy data: cleaning it; transforming it from one format into another; and extending it with web services and external data. This was new for me. 

1. In this blog I used R/RStudio and copilot for the **most important steps in the data cleaning process**, similar as you can find [here](https://datacarpentry.org/openrefine-socialsci/. Second, I used OpenRefine for the first time.
2. Then I used R/RStudio and copilot for **some analyses** which are presented here [Data Carpentry:R for Social Scientists](https://kelseygonzalez.github.io/2020-01-15-brynmawr-lessons/intro.html)


## 1. Most important steps in data cleaning process

Let us first open the dataset of OpenRefine data, see [OpenRefine](https://openrefine.org/)


```{r}
library(readr)
SAFI_openrefine <- read_csv("openrefine/SAFI_openrefine.csv")
View(SAFI_openrefine)
```
```{r}
# use tidyverse package
library(tidyverse)

```

Let us put the variables in a specific order.

```{r}
# change order of variables
SAFI_openrefine <- SAFI_openrefine[,c("village","ward","district","province","interview_date","quest_no","start","end","items_owned","months_lack_food","months_no_water","liv_owned","res_change","no_food_mitigation","respondent_roof_type", "respondent_wall_type", "respondent_roof_type", "gps_Altitude", "gps_Latitude", "gps_Longitude", "years_farm", "no_membrs", "years_liv", "rooms")]
```

Let us research a specific variable.

```{r}
#show groups village
SAFI_openrefine$village
```

We have to make this variable more consistent.

```{r}
# change names of groups in village
# 49 will become Chirodzo, Chirdoze will become Chirodzo, Ruaca-Nhamuenda and Ruca wwill become Ruaca
library(tidyverse)
SAFI_openrefine$village <- recode(SAFI_openrefine$village, "49" = "Chirodzo", "Chirdoze" = "Chirodzo", "Chirdozo" = "Chirodzo", "Ruaca-Nhamuenda" = "Ruaca", "Ruaca - Nhamuenda" = "Ruaca", "Ruca" = "Ruaca")



```

How does it look now?

```{r}
#show groups village
SAFI_openrefine$village
```

```{r}
# count village values are there in the survey results data?
table(SAFI_openrefine$village)
```



```{r}
# count interview_date values are there in the survey results data?  
table(SAFI_openrefine$interview_date)
```
Look at variable `interview_date`. It is formatted as text. We have to change this to a date format.

```{r}
# Is variable interview_date formatted as Text or Date? (ChatGPT)
my_variable<-"17-Nov-16" 

#check the class of interview_date
if (class(my_variable) == "character") {
    print("The variable is formatted as text.")
} else if (class(my_variable) == "Date") {
    print("The variable is formatted as a date.")
} else {
    print("The variable is of an unknown type.")
}
class(SAFI_openrefine$interview_date)
```

Change interview_date

```{r}
# Use faceting to produce a timeline display for interview_date
# convert this column to dates
SAFI_openrefine$interview_date <- dmy(SAFI_openrefine$interview_date)
```

```{r}
# R count different dates of variable interview_data 
table(SAFI_openrefine$interview_date)
```


## Transforming data

```{r}
# remove left bracket from items_owned
SAFI_openrefine$items_owned <- str_replace(SAFI_openrefine$items_owned, "\\[", "")

#remove right bracket from items_owned
SAFI_openrefine$items_owned <- str_replace(SAFI_openrefine$items_owned, "\\]", "")

# remove all ' from items_owned
SAFI_openrefine$items_owned <- str_replace_all(SAFI_openrefine$items_owned, "'", "")

#remove white spaces from cells of items_owned
SAFI_openrefine$items_owned <- str_trim(SAFI_openrefine$items_owned)

# remove all ; from items_owned
SAFI_openrefine$items_owned <- str_replace_all(SAFI_openrefine$items_owned, ";", "")

```

```{r}
# items_owned count and add the objects
items_owned_count <- table(SAFI_openrefine$items_owned)
# add the objects of items_owned_count
items_owned_count <- sort(items_owned_count, decreasing = TRUE)
# print the objects of items_owned_count
items_owned_count

```

```{r}

# how many radio do we have over 131 rows?
items_owned_count["radio"]
```

# Filtering

```{r}
table(SAFI_openrefine$respondent_roof_type)
```


## 2. Some analysis
For the second part I did some Explorative Data Analysis using `tidyverse` package of R?RStudio and copilot. I used a clean dataset and followed Data Carpentry:R for Social Scientists. See [Data Carpentry:R for Social Scientists](https://kelseygonzalez.github.io/2020-01-15-brynmawr-lessons/intro.html), especially chapter 6 *Data wrangling with dplyr* and chapter 8 *Data visualization with ggplot2*.


```{r}
library(tidyverse)
library(readr)
if (!dir.exists("data"))
    dir.create("data")

if (! file.exists("data/SAFI_clean.csv")) {
    download.file("https://ndownloader.figshare.com/files/11492171",
                  "data/SAFI_clean.csv", mode = "wb")
}

# open SAFI_clean.csv
safi <- read_csv("data/SAFI_clean.csv")
safi

glimpse(safi)

```

## Explorative Data Analysis using `dplyr`

### selecting
The code `select()` we use to select columns

For example

```{r}
#select interview_date, village, no_membrs, years_liv
select(safi, interview_date, village, no_membrs, years_liv)

```

### filtering
You can also choose rows based on their values using `filter()`

```{r}
# filter for rows where village is "God"
filter(safi, village == "God")
```

### pipes
The pipe operator `%>%` is used to chain together multiple `dplyr` functions (for example selecting and filtering. You can also use `|>` instead of `%>%` if you prefer.
```{r}
# filter village=God and select no_membrs and years_liv
safi %>% 
  filter(village == "God") %>% 
  select(no_membrs, years_liv)

```



### mutating
We use `mutate()` to create new columns

```{r}

#ratio of number of household members to number of rooms
safi %>% 
  mutate(ratio = no_membrs / rooms)


```

Let us research whether a member of an irrigation association had any effect on the ratio of household members to rooms. To look at this relationship, we remove data from our dataset where the respondent didn't answer the question of whether they were a memnber of an irrigation association (recorded als "NULL" in the dataset)


```{r}
# to remove these cases, we could use filter() to remove and people per room is ratio of number of household members to number of rooms 
safinew<-safi %>% 
  filter(!is.na(memb_assoc)) %>%
  mutate(people_per_room = no_membrs / rooms)
safinew
```
### summarizing
`group_by()` is used to group the data by a variable and often used together with `summarize`. `summarize()` is used to calculate summary statistics for each group. 

```{r}
# to compute the average number of household size for each village
safi %>% 
  group_by(village) %>% 
  summarize(mean_no_membrs = mean(no_membrs))


```

```{r}
# group by multiple columns (village, memb_assoc) and calculate the mean number of household members
safi %>% 
  group_by(village, memb_assoc) %>% 
  summarize(mean_no_membrs = mean(no_membrs))


```

Once the data are groupes, you can also summarize multiple variables at once (and not necessary on the same variable)

```{r}
# we could  add a column indicating the minimum household size for each village for each group (member of irrigation association or not) and take out if memb_assoc is missing.
safi %>% 
  filter(!is.na(memb_assoc)) %>%
  group_by(village, memb_assoc) %>% 
  summarize(mean_no_membrs = mean(no_membrs),
            min_no_membrs = min(no_membrs))

```



### counting

`count()` is used to count the number of observations in each group, for each factor or comination of factors

```{r}
# count village
safi %>% 
  count(village)

```

```{r}
# count village in decreasing order
safi %>% 
  count(village, sort = TRUE)

```


## Data visualization

Building plots with `ggplot2` involves three steps:
- step 1: use `ggplot()` to specify the dataset and variables to be plotted
- step 2: add on layers to specify the type of plot (points, lines, bars, etc.)
- step 3: (optionally) add on themes, faceting specifications, and other details to make the plot more informative and interpretable

Building plots with ggplot2 is an iterative process. You may need to try out several different combinations of variables and layers before you get the plot you want.

```{r}
# plot no_membrs vs. rooms 
ggplot(data = safi) +
  geom_point(mapping = aes(x = no_membrs, y = rooms))

```

```{r}
# use bit of randomness in position to avoid overplotting, alpha 0.5
ggplot(data = safi) +
  geom_point(mapping = aes(x = no_membrs, y = rooms), position = "jitter", alpha = 0.5)

```

```{r}
# same plot but use color blue
ggplot(data = safi) +
  geom_point(mapping = aes(x = no_membrs, y = rooms), position = "jitter", alpha = 0.5, color = "blue")

```

```{r}
# same plot but use color=village
ggplot(data = safi) +
  geom_point(mapping = aes(x = no_membrs, y = rooms, color = village), position = "jitter", alpha = 0.5)

```

```{r}
# same plot but add title and subtitle
ggplot(data = safi) +
  geom_point(mapping = aes(x = no_membrs, y = rooms, color = village), position = "jitter", alpha = 0.5) +
  labs(title = "Number of household members vs. number of rooms",
       subtitle = "Data from SAFI")

```

`ggplot` has a special technique called faceting that allows you to split one plot into multiple plots based on a factor included in the dataset. 

```{r}
# plot bar x=reSpondent_wall_type facet=village
ggplot(data = safi) +
  geom_bar(mapping = aes(x = respondent_wall_type)) +
  facet_wrap(~ village)

```

```{r}
# same plot but theme_bw()
ggplot(data = safi) +
  geom_bar(mapping = aes(x = respondent_wall_type)) +
  facet_wrap(~ village) +
  theme_bw()

```

## Conclusion
For me these were the first days I used copilot. I had no idea how I would find it. I was a bit sceptical I have to admit. This system works very good if:   
- you do your task step by step;   
- formulate simple;    
- you need to know the program to ask the right questions;   
- you have to get used of the ghost writing;    
- don't follow but take the lead yourself.   

I will use the system the next months to and I will make it my own.

